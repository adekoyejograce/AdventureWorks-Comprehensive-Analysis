USE project;

--COMBINE ALL SALES RECORD
SELECT *
INTO Sales
FROM
[Sales Data 2020]
UNION ALL
SELECT * FROM [Sales Data 2021]
UNION ALL
SELECT * FROM [Sales Data 2022]



--1:Retrieve the customers who have placed orders with a total amount greater than $10000
CREATE VIEW QUES1 AS(

SELECT CONCAT(FirstName,' ', LastName) AS Name, SUM(s.OrderQuantity * p.ProductPrice) AS Total_amount
FROM Customer c
JOIN Sales s
ON s.CustomerKey= c.CustomerKey
JOIN [ Product] p
ON s.ProductKey= p.ProductKey
GROUP BY FirstName, c.LastName
HAVING SUM(s.OrderQuantity * p.ProductPrice) > 10000
)





--Retrieve the total revenue and total orders generated by each product 
--category

CREATE VIEW QUES2 AS(

SELECT pc.CategoryName, ROUND(SUM(s.OrderQuantity * p.ProductPrice),2) AS Total_Revenue,
COUNT(s.OrderQuantity)  AS Total_order
FROM Sales s
JOIN [ Product] p
ON s.ProductKey= p.ProductKey
JOIN [Product Subcategories] ps
on P.ProductSubcategoryKey= PS.ProductSubcategoryKey
JOIN [Product Categories] pc
ON pc.ProductCategoryKey= ps.ProductCategoryKey
GROUP BY pc.CategoryName
)


--Retrieve the names of products, sub-categories and their categories for 
--products with a selling price greater than the average selling price of all 
--products. - SQ

CREATE VIEW QUES3a AS

WITH CTE AS (
SELECT p.ProductName, ps.SubcategoryName, pc.CategoryName, 
ROUND(p.ProductPrice,2) AS price
FROM [ Product] p
JOIN [Product Subcategories] ps
ON P.ProductSubcategoryKey= ps.ProductSubcategoryKey
JOIN [Product Categories] pc
ON ps.ProductCategoryKey= pc.ProductCategoryKey
)
SELECT * FROM CTE
WHERE Price > (SELECT AVG(PRICE) FROM CTE)


--USING SUBQUERY

SELECT p.ProductName, ps.SubcategoryName, pc.CategoryName,
ROUND(ProductPrice,2) AS price
FROM [ Product] p
JOIN [Product Subcategories] ps
ON P.ProductSubcategoryKey= ps.ProductSubcategoryKey
JOIN [Product Categories] pc
ON ps.ProductCategoryKey= pc.ProductCategoryKey
WHERE ProductPrice > (SELECT AVG(ProductPrice) FROM [ Product])



--How many customers have placed orders in “Canada”? List the customer 
--names - SQ


CREATE VIEW QUES4a AS


WITH CTE AS (
SELECT DISTINCT s.CustomerKey, t.Country
FROM Sales s
JOIN Territory t ON s.TerritoryKey = t.SalesTerritoryKey
WHERE t.Country= 'Canada')
SELECT COUNT(*) AS CustomerCount
FROM CTE;

--OR

SELECT COUNT (DISTINCT s.CustomerKey)
FROM Sales s
JOIN Territory t ON s.TerritoryKey = t.SalesTerritoryKey
WHERE t.Country= 'Canada'



CREATE VIEW QUES4b AS


WITH CTE AS (
SELECT DISTINCT s.CustomerKey, c.FirstName, c.LastName
FROM Customer c
JOIN Sales s
ON c.CustomerKey= s.CustomerKey
JOIN Territory t
ON t.SalesTerritoryKey= s.TerritoryKey
WHERE t.Country= 'Canada')
SELECT CONCAT(FirstName, ' ', LastName) AS CustomerName
FROM CTE;



--Find the 10 products that have been returned the most. How much money 
--was generated by these products? - SQ

CREATE VIEW QUES5a AS


SELECT ProductName 
FROM [ Product]
WHERE ProductKey IN (SELECT TOP 10 ProductKey
						FROM [Returns Data] 
						GROUP BY ProductKey
						ORDER BY COUNT(productkey) DESC);
						


CREATE VIEW QUES5b AS


SELECT ROUND(SUM(s.OrderQuantity * p.ProductPrice),2) AS Revenue
FROM Sales s
JOIN [ Product] p
ON s.ProductKey= p.ProductKey
WHERE p.ProductKey IN (SELECT TOP 10 ProductKey
						FROM [Returns Data] 
						GROUP BY ProductKey
						ORDER BY COUNT(productkey) DESC);


--Get a list of customers who have placed orders in more than one territory

CREATE VIEW QUES6 AS


SELECT CONCAT(FirstName, ' ', LastName) AS Fullname
FROM customer c
JOIN Sales s
ON c.CustomerKey = s.CustomerKey
JOIN Territory t
ON s.TerritoryKey= t.SalesTerritoryKey
GROUP BY CONCAT(FirstName, ' ', LastName)
HAVING COUNT(DISTINCT t.SalesTerritoryKey) > 1;



------Retrieve the product names and their corresponding sub-categories for 
------products that have been ordered at least 10 times.

CREATE VIEW QUES7 AS


SELECT p.ProductName, ps.SubcategoryName
FROM Sales s
JOIN [ Product] p
ON p.ProductKey= s.ProductKey
JOIN [Product Subcategories] ps
ON ps.ProductSubcategoryKey= p.ProductSubcategoryKey
GROUP BY p.ProductName, ps.SubcategoryName
HAVING COUNT(p.ProductKey) >10

--List the customer names who have placed orders after 2021. What is the 
--distribution of their occupation?

CREATE VIEW QUES8 AS


SELECT CONCAT(c.FirstName, ' ', c.LastName) AS Fullname,
c.Occupation, COUNT(*) AS OrderCount
FROM customer c
JOIN Sales s
ON C.CustomerKey= s.CustomerKey
WHERE s.OrderDate > '2021-12-31'
GROUP BY c.occupation, CONCAT(c.FirstName, ' ', c.LastName)
ORDER BY OrderCount DESC;



--Get a list of products and their corresponding order quantities for products 
--that have been ordered at least 5 times.

CREATE VIEW QUES9 AS


SELECT p.ProductName, s.OrderQuantity
FROM Sales s
JOIN [ Product] p
ON p.ProductKey= s.ProductKey
GROUP BY p.ProductName, s.OrderQuantity
HAVING COUNT(p.ProductKey) >= 5

--Retrieve the product names that start with the letter "C" or “H” and are 
--from the "Clothing" category


CREATE VIEW QUES10 AS


SELECT p.ProductName, pc.CategoryName
FROM [ Product] p
JOIN [Product Subcategories] ps
ON p.ProductSubcategoryKey = ps.ProductSubcategoryKey
JOIN [Product Categories] pc
ON ps.ProductCategoryKey = pc.ProductCategoryKey
WHERE (p.ProductName LIKE 'C%' OR p.ProductName LIKE 'H%')
AND pc.CategoryName = 'Clothing'



--Retrieve the product names that have been ordered in the ‘United States’ 
--or "Australia"

CREATE VIEW QUES11 AS


SELECT DISTINCT p.ProductName
FROM [ Product] p
JOIN Sales s
ON P.ProductKey= s.ProductKey
JOIN Territory t
ON s.TerritoryKey = t.SalesTerritoryKey
WHERE t.Country= 'United States' OR t.Country = 'Australia'

--Find the customer names who have placed orders with a total amount 
--greater than the average total amount of orders. – SQ

CREATE VIEW QUES12 AS


WITH CTE AS(
SELECT CONCAT(c.firstname, ' ', c.LastName) AS CustomerName,
ROUND(SUM(s.OrderQuantity * p.ProductPrice),2) AS total_amount
FROM Customer c
JOIN Sales s
ON c.CustomerKey= s.CustomerKey
JOIN [ Product] p
ON s.ProductKey = p.ProductKey
GROUP BY CONCAT(c.firstname, ' ', c.LastName))
SELECT CustomerName FROM CTE
WHERE total_amount > (SELECT AVG(total_amount) FROM CTE)



--Retrieve the top 5 customers who have placed the highest number of orders, 
--along with their order counts.


CREATE VIEW QUES13 AS


SELECT TOP 5 CONCAT(c.firstname, ' ', c.LastName) AS FullName, 
SUM(s.OrderQuantity) AS qty
FROM customer  c
JOIN Sales s
ON c.CustomerKey = s.CustomerKey
GROUP BY CONCAT(c.firstname, ' ', c.LastName)
ORDER BY 2 DESC;

--List the customers who have placed orders within the last 6 months
--(consider the last date in the data)


CREATE VIEW QUES14 AS


WITH MaxOrderDate AS
(SELECT max(orderdate) AS max
FROM Sales)
SELECT DISTINCT CONCAT(c.FirstName, ' ', c.LastName) AS FullName, s.OrderDate
FROM customer  c
JOIN Sales s
ON s.CustomerKey = c.CustomerKey
CROSS JOIN MaxOrderDate
WHERE s.OrderDate >= DATEADD(Month, -6, MaxOrderDate.max)

--We want to reach out to our best customers in 2022. Can you get emails of 
--Top 50 customers based on revenue?


CREATE VIEW QUES15 AS


SELECT TOP 50 c.EmailAddress, 
SUM(ROUND((s.OrderQuantity
* p.ProductPrice), 2)) AS revenue
FROM Customer c
JOIN Sales s
ON c.CustomerKey= s.CustomerKey
JOIN [ Product] p
ON s.ProductKey = p.ProductKey
GROUP BY c.EmailAddress
ORDER BY revenue DESC;

